{"version":3,"sources":["../../src/ReactPathTooltip.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PathTooltip","props","useState","hidden","setHidden","x","y","w","h","isLeft","isTop","tooltipRect","setTooltipRect","fontSize","fontFamily","bgColor","textColor","pathRef","svgRef","textRef","React","useEffect","e","svgRect","textRect","updateTooltip","bottomRight","bottomLeft","topRight","topLeft","points","pointerEvents","width","rx","ry","height","fill","visibility","ref","cursor","App","createRef","redRef","greenRef","blueRef","purpleRef","greyRef","pinkRef","className","stroke","cx","cy","r","tip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b35ae9e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\ninterface IProps {\n  tip: string,\n  pathRef: React.RefObject<SVGElement>,\n  svgRef: React.RefObject<SVGSVGElement>,\n  minWidth?: number,\n  fontSize?: number,\n  fontFamily?: string,\n  bgColor?: string,\n  textColor?: string\n}\n\nexport const PathTooltip: React.FC<IProps> = (props) => {\n\n  // set initial state\n  const [hidden, setHidden] = useState(true)\n  const [tooltipRect, setTooltipRect] = useState({ x: 0, y: 0, w:0, h:0, isLeft: false, isTop: false })\n  const [fontSize, ] = useState (props[\"fontSize\"] || 12)\n  const [fontFamily, ] = useState (props[\"fontFamily\"] || \"sans-serif\")\n  const [bgColor, ] = useState (props[\"bgColor\"] || \"black\")\n  const [textColor, ] = useState (props[\"textColor\"] || \"white\")\n  const pathRef = props.pathRef\n  const svgRef = props.svgRef\n  const textRef = React.createRef<SVGTextElement>()\n\n  // use effect to handle mouse over and mouse leave\n  useEffect(() => {\n\n    const updateTooltip = (e:MouseEvent) => {\n      if(svgRef && pathRef && textRef && svgRef.current && pathRef.current && textRef.current) {\n        const svgRect = svgRef.current.getBoundingClientRect()\n        const textRect = textRef.current.getBoundingClientRect()\n\n         const isLeft = ((e.x - svgRect.x) > (svgRect.width / 2))\n         const isTop = ((e.y - svgRect.y) > (svgRect.height / 2))\n\n        const w = textRect.width + 20\n        const h = textRect.height + 20\n        const x = (isLeft) ? e.x - svgRect.x + 8 - w : e.x - svgRect.x - 8\n        const y = (isTop) ? e.y - svgRect.y - 12 - h : e.y - svgRect.y + 8\n\n        setTooltipRect({ x: x, y: y, w: w, h: h, isLeft: isLeft, isTop: isTop })\n      }\n    }\n\n    if (pathRef && pathRef.current) {\n      pathRef.current.addEventListener('mouseover', () => { setHidden(false) })\n      pathRef.current.addEventListener('mouseleave', () => { setHidden(true) })\n      pathRef.current.addEventListener('mousemove', (e) => { if (!hidden) updateTooltip(e) })\n    }\n  }, [pathRef, svgRef, textRef])\n\n  // build up tip of tooltip\n  const bottomRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + 30).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + 22).toString() + \",\" + tooltipRect.y.toString()\n  const bottomLeft = (tooltipRect.x + tooltipRect.w - 8).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 25).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + tooltipRect.y.toString()\n  const topRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y +tooltipRect.h).toString()\n  const topLeft = (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + (tooltipRect.y +tooltipRect.h).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString()\n  const points = (tooltipRect.isLeft && tooltipRect.isTop) ? topLeft : (tooltipRect.isTop) ? topRight : (tooltipRect.isLeft) ? bottomLeft : bottomRight \n\n  // render everything\n  return (\n    <g pointerEvents={\"none\"} >\n      <rect x={tooltipRect.x} y={tooltipRect.y} width={tooltipRect.w} rx={5} ry={5} height={tooltipRect.h} fill={bgColor} visibility={(hidden ? \"hidden\" : \"visible\")} />\n      <polygon fill={bgColor} visibility={(hidden ? \"hidden\" : \"visible\")} points={points} />\n      <text ref={textRef} x={tooltipRect.x + 10} cursor={\"default\"} y={tooltipRect.y + tooltipRect.h/1.66} fontFamily={fontFamily} fontSize={fontSize} fill={textColor} visibility={(hidden ? \"hidden\" : \"visible\")}>\n        {props.tip}\n      </text>\n    </g>\n  )\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport { PathTooltip } from \"react-path-tooltip\" // import the package\n\nfunction App() {\n\n  const svgRef = React.createRef<SVGSVGElement>()\n  const redRef = React.createRef<SVGCircleElement>()\n  const greenRef = React.createRef<SVGCircleElement>()\n  const blueRef = React.createRef<SVGCircleElement>()\n  const purpleRef = React.createRef<SVGRectElement>()\n  const greyRef = React.createRef<SVGCircleElement>()\n  const pinkRef = React.createRef<SVGCircleElement>()\n\n  return (\n    < div className=\"App\" >\n      <h1>The SVG</h1>\n      < div className=\"Main\">\n        <svg width=\"400\" height=\"400\" ref={svgRef}>\n          <rect width=\"400\" height=\"400\" stroke=\"black\" fill=\"none\"/>\n\n          <circle cx={50} cy={50} r={50} fill=\"red\" ref={redRef} />\n          <circle cx={80} cy={80} r={50} fill=\"green\" ref={greenRef} />\n          <circle cx={350} cy={350} r={30} fill=\"blue\" ref={blueRef} />\n          <rect x={320} y={50} width=\"50\" height=\"50\" fill=\"purple\" ref={purpleRef}/>\n          <circle cx={50} cy={320} r={10} fill=\"grey\" ref={greyRef} />\n          <circle cx={190} cy={190} r={40} fill=\"pink\" ref={pinkRef} />\n\n          <PathTooltip svgRef={svgRef} pathRef={redRef} tip=\"This is the long Red!\" />\n          <PathTooltip svgRef={svgRef} pathRef={greenRef} tip=\"Green\" />\n          <PathTooltip svgRef={svgRef} pathRef={blueRef} tip=\"BL\" fontFamily={\"system-ui\"}/>\n          <PathTooltip svgRef={svgRef} pathRef={purpleRef} tip=\"Purple\" fontSize={24}/>\n          <PathTooltip svgRef={svgRef} pathRef={greyRef} tip=\"Grey\" bgColor=\"#909090\" textColor=\"blue\"/>\n          <PathTooltip svgRef={svgRef} pathRef={pinkRef} tip=\"Pink\" textColor=\"pink\"/>\n\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n// <svg width=\"400\" height=\"400\" ref={svgRef} viewBox={\"0 0 960 960\"}>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}